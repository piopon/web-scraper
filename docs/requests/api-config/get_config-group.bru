meta {
  name: get_config-group
  type: http
  seq: 2
}

get {
  url: http://localhost:5000/api/v1/config/groups?name=games&category=ðŸŽ®
  body: none
  auth: bearer
}

params:query {
  name: games
  category: ðŸŽ®
  ~domain: https://store.steampowered.com/
}

auth:bearer {
  token: {{demo-token}}
}

tests {
  test("group is correctly received", function() {
    expect(res.getStatus()).to.equal(200);
  });

  test("group received JSON data", function() {
    expect(res.getHeader("content-type")).to.equal("application/json; charset=utf-8");
  });

  test("group has correct content length", function() {
    expect(res.getHeader("content-length")).to.equal("696");
  });

  test("group has correct top-level structure", function() {
    const group = res.getBody();
    expect(group).to.be.a('array');
  });

  test("group has correct top-level values", function() {
    const group = res.getBody();
    expect(group).to.have.lengthOf(1);
  });

  test("group has correct element structure", function() {
    const group = res.getBody();
    expect(group[0]).to.be.a('object');
    expect(group[0]).to.have.property('_id');
    expect(group[0]._id).to.be.a('string');
    expect(group[0]).to.have.property('name');
    expect(group[0].name).to.be.a('string');
    expect(group[0]).to.have.property('category');
    expect(group[0].category).to.be.a('string');
    expect(group[0]).to.have.property('domain');
    expect(group[0].domain).to.be.a('string');
    expect(group[0]).to.have.property('observers');
    expect(group[0].observers).to.be.a('array');
  });

  test("group has correct element values", function() {
    const group = res.getBody();
    expect(group[0]._id).to.match(/^[0-9a-fA-F]{24}$/);
    expect(group[0].name).to.equal("games");
    expect(group[0].category).to.equal("ðŸŽ®");
    expect(group[0].domain).to.equal("https://store.steampowered.com/");
    expect(group[0].observers).to.have.lengthOf(1);
  });

  test("group has correct observer data structure", function() {
    const group = res.getBody();
    for(const observerIndex in group[0].observers.length) {
      const observer = group.observers[observerIndex];
      expect(observer).to.be.a('object');
      expect(observer).to.have.property('_id');
      expect(observer._id).to.be.a('string');
      expect(observer).to.have.property('name');
      expect(observer.name).to.be.a('string');
      expect(observer).to.have.property('path');
      expect(observer.path).to.be.a('string');
      expect(observer).to.have.property('target');
      expect(observer.target).to.be.a('string');
      expect(observer).to.have.property('history');
      expect(observer.history).to.be.a('string');
      expect(observer).to.have.property('container');
      expect(observer.container).to.be.a('string');
      expect(observer).to.have.property('title');
      expect(observer.title).to.be.a('object');
      expect(observer).to.have.property('image');
      expect(observer.image).to.be.a('object');
      expect(observer).to.have.property('price');
      expect(observer.price).to.be.a('object');
    }
  });

  test("group has correct observer data values", function() {
    const group = res.getBody();
    expect(group[0].observers[0]._id).to.match(/^[0-9a-fA-F]{24}$/);
    expect(group[0].observers[0].name).to.equal("Prince of Persia");
    expect(group[0].observers[0].path).to.equal("app/19980/Prince_of_Persia/");
    expect(group[0].observers[0].target).to.equal("domcontentloaded");
    expect(group[0].observers[0].history).to.equal("off");
    expect(group[0].observers[0].container).to.equal("div.page_content_ctn");
  });

  test("group has correct title component data structure", function() {
    const group = res.getBody();
    for(const observerIndex in group[0].observers.length) {
      const observer = group[0].observers[observerIndex];
      expect(observer.title).to.have.property('_id');
      expect(observer.title._id).to.be.a('string');
      expect(observer.title).to.have.property('interval');
      expect(observer.title.interval).to.be.a('string');
      expect(observer.title).to.have.property('selector');
      expect(observer.title.selector).to.be.a('string');
      expect(observer.title).to.have.property('attribute');
      expect(observer.title.attribute).to.be.a('string');
      expect(observer.title).to.have.property('auxiliary');
      expect(observer.title.auxiliary).to.be.a('string');
    }
  });

  test("group has correct title component data values", function() {
    const group = res.getBody();
    expect(group[0].observers[0].title._id).to.match(/^[0-9a-fA-F]{24}$/);
    expect(group[0].observers[0].title.interval).to.equal("");
    expect(group[0].observers[0].title.selector).to.equal("div#appHubAppName");
    expect(group[0].observers[0].title.attribute).to.equal("innerHTML");
    expect(group[0].observers[0].title.auxiliary).to.equal("");
  });

  test("group has correct image component data structure", function() {
    const group = res.getBody();
    for(const observerIndex in group[0].observers.length) {
      const observer = group[0].observers[observerIndex];
      expect(observer.image).to.have.property('_id');
      expect(observer.image._id).to.be.a('string');
      expect(observer.image).to.have.property('interval');
      expect(observer.image.interval).to.be.a('string');
      expect(observer.image).to.have.property('selector');
      expect(observer.image.selector).to.be.a('string');
      expect(observer.image).to.have.property('attribute');
      expect(observer.image.attribute).to.be.a('string');
      expect(observer.image).to.have.property('auxiliary');
      expect(observer.image.auxiliary).to.be.a('string');
    }
  });

  test("group has correct image component data values", function() {
    const group = res.getBody();
    expect(group[0].observers[0].image._id).to.match(/^[0-9a-fA-F]{24}$/);
    expect(group[0].observers[0].image.interval).to.equal("");
    expect(group[0].observers[0].image.selector).to.equal("img.game_header_image_full");
    expect(group[0].observers[0].image.attribute).to.equal("src");
    expect(group[0].observers[0].image.auxiliary).to.equal("");
  });

  test("group has correct price component data structure", function() {
    const group = res.getBody();
    for(const observerIndex in group[0].observers.length) {
      const observer = group[0].observers[observerIndex];
      expect(observer.price).to.have.property('_id');
      expect(observer.price._id).to.be.a('string');
      expect(observer.price).to.have.property('interval');
      expect(observer.price.interval).to.be.a('string');
      expect(observer.price).to.have.property('selector');
      expect(observer.price.selector).to.be.a('string');
      expect(observer.price).to.have.property('attribute');
      expect(observer.price.attribute).to.be.a('string');
      expect(observer.price).to.have.property('auxiliary');
      expect(observer.price.auxiliary).to.be.a('string');
    }
  });

  test("group has correct price component data values", function() {
    const group = res.getBody();
    expect(group[0].observers[0].price._id).to.match(/^[0-9a-fA-F]{24}$/);
    expect(group[0].observers[0].price.interval).to.equal("");
    expect(group[0].observers[0].price.selector).to.equal("div.game_purchase_price");
    expect(group[0].observers[0].price.attribute).to.equal("innerHTML");
    expect(group[0].observers[0].price.auxiliary).to.equal("PLN");
  });
}
