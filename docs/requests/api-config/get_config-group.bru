meta {
  name: get_config-group
  type: http
  seq: 2
}

get {
  url: http://localhost:5000/api/v1/config/groups?name=games&category=ðŸŽ®
  body: none
  auth: bearer
}

params:query {
  name: games
  category: ðŸŽ®
  ~domain: https://store.steampowered.com/
}

auth:bearer {
  token: {{demo-token}}
}

tests {
  test("config is correctly received", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("config received JSON data", function() {
    expect(res.getHeader("content-type")).to.equal("application/json; charset=utf-8");
  });
  
  test("config has correct content length", function() {
    expect(res.getHeader("content-length")).to.equal("696");
  });
  
  test("group has correct data structure", function() {
    const group = res.getBody();
    expect(group).to.be.a('array');
  });

  test("group has correct data values", function() {
    const group = res.getBody();
    expect(group).to.have.lengthOf(1);
  });

  test("group has correct element structure", function() {
    const group = res.getBody();
    expect(group[0]).to.be.a('object');
    expect(group[0]).to.have.property('_id');
    expect(group[0]._id).to.be.a('string');
    expect(group[0]).to.have.property('name');
    expect(group[0].name).to.be.a('string');
    expect(group[0]).to.have.property('category');
    expect(group[0].category).to.be.a('string');
    expect(group[0]).to.have.property('domain');
    expect(group[0].domain).to.be.a('string');
    expect(group[0]).to.have.property('observers');
    expect(group[0].observers).to.be.a('array');
  });

  test("group has correct element values", function() {
    const group = res.getBody();
    expect(group[0]._id).to.match(/^[0-9a-fA-F]{24}$/);
    expect(group[0].name).to.equal("games");
    expect(group[0].category).to.equal("ðŸŽ®");
    expect(group[0].domain).to.equal("https://store.steampowered.com/");
    expect(group[0].observers).to.have.lengthOf(1);
  });

}
