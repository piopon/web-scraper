meta {
  name: get_demo-config
  type: http
  seq: 3
}

get {
  url: http://localhost:5000/api/v1/config
  body: none
  auth: bearer
}

auth:bearer {
  token: {{demo-token}}
}

tests {
  test("config is correctly received", function() {
    expect(res.getStatus()).to.equal(200);
  });

  test("config received JSON data", function() {
    expect(res.getHeader("content-type")).to.equal("application/json; charset=utf-8");
  });

  test("config has correct content length", function() {
    expect(res.getHeader("content-length")).to.equal("1966");
  });

  test("config has correct top-level data structure", function() {
    const body = res.getBody();
    expect(body).to.be.a('object');
    expect(body).to.have.property('_id');
    expect(body).to.have.property('user');
    expect(body).to.have.property('groups');
    expect(body).to.have.property('__v');
  });

  test("config has correct group data structure", function() {
    const body = res.getBody().groups;
    expect(body).to.be.a('array');
    expect(body).to.have.lengthOf(2);
    expect(body[0]).to.have.property('_id');
    expect(body[0]).to.have.property('name');
    expect(body[0]).to.have.property('category');
    expect(body[0]).to.have.property('domain');
    expect(body[0]).to.have.property('observers');
  });

  test("config has correct observer data structure", function() {
    const body = res.getBody().groups[0].observers;
    expect(body).to.be.a('array');
    expect(body).to.have.lengthOf(2);
    expect(body[0]).to.have.property('_id');
    expect(body[0]).to.have.property('name');
    expect(body[0]).to.have.property('path');
    expect(body[0]).to.have.property('target');
    expect(body[0]).to.have.property('history');
    expect(body[0]).to.have.property('container');
    expect(body[0]).to.have.property('title');
    expect(body[0]).to.have.property('image');
    expect(body[0]).to.have.property('price');
  });
}
