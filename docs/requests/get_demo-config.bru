meta {
  name: get_demo-config
  type: http
  seq: 3
}

get {
  url: http://localhost:5000/api/v1/config
  body: none
  auth: bearer
}

auth:bearer {
  token: {{demo-token}}
}

tests {
  test("config is correctly received", function() {
    expect(res.getStatus()).to.equal(200);
  });

  test("config received JSON data", function() {
    expect(res.getHeader("content-type")).to.equal("application/json; charset=utf-8");
  });

  test("config has correct content length", function() {
    expect(res.getHeader("content-length")).to.equal("1966");
  });

  test("config has correct top-level data structure", function() {
    const body = res.getBody();
    expect(body).to.be.a('object');
    expect(body).to.have.property('_id');
    expect(body._id).to.be.a('string');
    expect(body).to.have.property('user');
    expect(body.user).to.be.a('string');
    expect(body).to.have.property('groups');
    expect(body.groups).to.be.a('array');
    expect(body).to.have.property('__v');
    expect(body.__v).to.be.a('number');
  });

  test("config has correct top-level data values", function() {
    const body = res.getBody();
    expect(body._id).to.match(/^[0-9a-fA-F]{24}$/);
    expect(body.user).to.match(/^[0-9a-fA-F]{24}$/);
    expect(body.groups).to.have.lengthOf(2);
    expect(body.__v).to.be.at.least(0);
  });

  test("config has correct group data structure", function() {
    const groups = res.getBody().groups;
    for(const groupIndex in groups.length) {
      const group = body[groupIndex];
      expect(group).to.be.a('object');
      expect(group).to.be.a('object');
      expect(group).to.have.property('_id');
      expect(group._id).to.be.a('string');
      expect(group).to.have.property('name');
      expect(group.name).to.be.a('string');
      expect(group).to.have.property('category');
      expect(group.category).to.be.a('string');
      expect(group).to.have.property('domain');
      expect(group.domain).to.be.a('string');
      expect(group).to.have.property('observers');
      expect(group.observers).to.be.a('array');
    }
  });

  test("config has correct group data values", function() {
    const groups = res.getBody().groups;
    expect(groups[0]._id).to.match(/^[0-9a-fA-F]{24}$/);
    expect(groups[0].name).to.equal("stocks");
    expect(groups[0].category).to.equal("ðŸ“ˆ");
    expect(groups[0].domain).to.equal("https://www.tradingview.com");
    expect(groups[0].observers).to.have.lengthOf(2);
    expect(groups[1]._id).to.match(/^[0-9a-fA-F]{24}$/);
    expect(groups[1].name).to.equal("games");
    expect(groups[1].category).to.equal("ðŸŽ®");
    expect(groups[1].domain).to.equal("https://store.steampowered.com/");
    expect(groups[1].observers).to.have.lengthOf(1);
  });

  test("config has correct observer data structure", function() {
    const body = res.getBody().groups;
    for(const group in body.length) {
      for(const observer in body[group].observers.length) {
        expect(body[group].observers[observer]).to.have.property('_id');
        expect(body[group].observers[observer]._id).to.be.a('string');
        expect(body[group].observers[observer]).to.have.property('name');
        expect(body[group].observers[observer].name).to.be.a('string');
        expect(body[group].observers[observer]).to.have.property('path');
        expect(body[group].observers[observer].path).to.be.a('string');
        expect(body[group].observers[observer]).to.have.property('target');
        expect(body[group].observers[observer].target).to.be.a('string');
        expect(body[group].observers[observer]).to.have.property('history');
        expect(body[group].observers[observer].history).to.be.a('string');
        expect(body[group].observers[observer]).to.have.property('container');
        expect(body[group].observers[observer].container).to.be.a('string');
        expect(body[group].observers[observer]).to.have.property('title');
        expect(body[group].observers[observer].title).to.be.a('object');
        expect(body[group].observers[observer]).to.have.property('image');
        expect(body[group].observers[observer].image).to.be.a('object');
        expect(body[group].observers[observer]).to.have.property('price');
        expect(body[group].observers[observer].price).to.be.a('object');
      }
    }
  });
}
