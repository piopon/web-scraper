meta {
  name: get_data-all
  type: http
  seq: 1
}

get {
  url: http://localhost:5000/api/v1/data?owner=bruno@test.ci
  body: none
  auth: none
}

params:query {
  owner: bruno@test.ci
}

tests {
  test("data is correctly received", function() {
    expect(res.getStatus()).to.equal(200);
  });

  test("data received JSON data", function() {
    expect(res.getHeader("content-type")).to.equal("application/json; charset=utf-8");
  });

  test("data has correct content length", function() {
    expect(res.getHeader("content-length")).to.equal("377");
  });

  test("data has correct top-level structure", function() {
    const data = res.getBody();
    expect(data).to.be.a('array');
  });

  test("data has correct top-level values", function() {
    const data = res.getBody();
    expect(data).to.have.lengthOf(2);
  });

  test("data has correct element structure", function() {
    const data = res.getBody();
    for(const dataIndex in data.length) {
      const dataElement = data[dataIndex];
      expect(dataElement).to.have.property('name');
      expect(dataElement.name).to.be.a('string');
      expect(dataElement).to.have.property('category');
      expect(dataElement.category).to.be.a('string');
      expect(dataElement).to.have.property('items');
      expect(dataElement.items).to.be.a('array');
    }
  });

  test("data has correct element values", function() {
    const data = res.getBody();
    expect(data[0].name).to.equal("stocks");
    expect(data[0].category).to.equal("ðŸ“ˆ");
    expect(data[0].items).to.have.lengthOf(2);
    expect(data[1].name).to.equal("games");
    expect(data[1].category).to.equal("ðŸŽ®");
    expect(data[1].items).to.have.lengthOf(1);
  });
}
